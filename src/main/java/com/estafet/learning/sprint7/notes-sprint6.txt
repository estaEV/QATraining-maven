Lifecycle actions:
    validate - validate the project is correct and all necessary information is available. verifies pom files
    compile - compile the source code of the project
    test - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
    package - take the compiled code and package it in its distributable format, such as a JAR.
    verify - run any checks on results of integration tests to ensure quality criteria are met
    install - install the package into the local repository, for use as a dependency in other projects locally
    deploy - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.

    clean -
    checking dependencies
    mvn dependency:analyze

    creating remote branch
    git add maven

Project Object Model:
    simple / super / effective (combined both) POM

Dependency scope:
    Compile - default / packaged in the jar file
    Provided
    Runtime only at runtime, but not compile
    Test
    System - same as compile, but we provide the path to the dependency

Maven repositories - its where the dependencies are stored

<dependencyManagement> / <pluginManagement>
 - dependencies/plugin from the parent pom are not available in the child pom's. They have to me explicitly declarated in the child pom, so they can be available.

Profiles: customized build configurations. For example: skip the test part: mvn -P skip-test clean install

----------------- jUnit -----------------
- jUnit and jupiter have different annotations. keep an eye from which library have you imported @Test
     junit 4 - beforeClass, afterClass, before, after
     junit 5 (jupiter) - beforeAll, afterAll, beforeEach, afterEach

- @DisplayName is cool and works for the class also
- in assertEquals the third parameter (msg when the test is failed) is generated even when the test passes. if we wrap it in a lambda its gonna be triggered only when the test fails
- @Nested - we can have nested class inside which we can place tests so they can be groped in the report
- assertAll() - a series of assertions in one test method, that are collectively testing one assertion. It prevents short circuiting. For ex.: the first assertion fails and if the second assertion also fails, that is not showed in the error msg.
- @Tag - edit configuration - run tests with specific tag
- skipping tests compile and/or run with mvn commands - mvn -DskipTests package
- skip building the test folder using a pom.xml property - <maven.test.skip>true</maven.test.skip>
- @RunWith annotation has been replaced by the more powerful @ExtendWith but can be still used in JUnit 5 for the sake of backward compatability

dependency injection/ inversion of control / test double

-------------------------------
Q&A review:
    Differences between oracle and mysql:
    oracle - there is no null and boolean
    builder design patter

